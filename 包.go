包
文件名不需要与包名一致
包名使用小写字符，不应当有下划线或者混合大小写
包名导入可以起别名
	import 导入的是 路径名不是包名（当包名与目录名不同时可验证）
	import bar "bytes"
	不能导入不使用的包
	导入的包一定不会使用 必须使用 _ 来取别名，否则必须移除这个包的导入语句
		import _ "bytes"
		这也意味着在当前文件中不会使用这个包
		目的：不使用这个包，可以让 这个包的 init() 函数被发现和执行
包名可以是代码的根目录名：
	import 'compress/gzip'
	名字是gzip
一个包可以由多个文件组成，使用相同的 package <name>  都属于一个包
惯例：一个包一个文件夹 包名与文件夹名 相同
函数/成员/新类型/全局变量等各种标志符-驼峰命名：名字以大写字母(包括拉丁文、希腊文、斯拉夫文、英文等等)开头的是可导出的，可以在包的外部调用
	公有函数的名字以大写字母开头
	私有函数的名字以小写字母开头
查找包路径：
	搜索当前路径的vendor目录
	搜索上一级目录里面的vendor目录
	一直往上搜索到$GOPATH/src里面的vendor目录
	搜索$GOPATH/src的路径
 		如果存在多个$GOPATH，会从前到后一个一个搜索
  对于同名的包 只会加载 第一个 被找到的


程序的初始化和执行都起始于main包。如果main包还导入了其它的包，那么就会在编译时将它们依次导入。
有时一个包会被多个包同时导入，那么它只会被导入一次。
当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行init函数（如果有的话），
依次类推。等所有被导入的包都加载完毕了，就会开始对main包中的包级常量和变量进行初始化，
然后执行main包中的init函数（如果存在的话），最后执行main函数

包的文档
 /*
 	包说明
 */
 package regexp
 
 //定义导出的函数应当有注释
 func Printf() { ... }

测试包 
 测试包 package 与 被测试包 相同
 需要 import "testing" 和 go test
 测试文件名： *_test.go
 测试函数名：Test开头
 func TestXxx(t *testing.T)
 内容：
 	t.Fail() 	// 测试失败，仍然继续执行当前文件
 	t.FailNow() // 测试失败，中止当前文件执行，执行下一个文件
 	t.Log("...") // 记录文本到错误日志
 	t.Fatal("...")    // 等价于 t.Log("...")后跟随 t.FailNow()

 示例： 
 	package even
 	import "testing"

 	func TestEven(t *testing.T) {
 		if ! Even(2) {
 			t.Log("....")
 			t.Fail()
 		}
 	}

  go test

 编写包的时候应当一边写代码，一边写一些文档和测试函数

main包
	Go语言的编译程序会试图吧这个包编译为二进制 可执行 文件
	任何可执行程序必须有一个main包
	main() 函数是程序的入口，没有这个函数程序就无法开始执行
	程序编译时，使用main包代码所在目录的目录名作为二进制可执行文件的文件名
	Go文档经常使用命令command这个词来指代可执行程序：如命令行应用程序。
	Go语言里命令指的是任何可执行程序，而包更常用于可导入的功能单元
常用的包 目录：$GOROOT/src/pkg
	fmt  实现了格式化的I/O
		%v	值的默认格式表示
		%+v	类似%v，但输出结构体时会添加字段名
		%#v	值的Go语法表示
		%T	值的类型的Go语法表示
		%%	百分号

	io 	原始I/O操作界面
	bufio 实现了缓冲的I/O，封装于 io.Reader 和 io.Writer 对象
		创建了另一个对象（Reader 和 Writer）在提供缓冲的同时实现了一些文本I/O的功能
	sort	提供了对数组和用户定义集合的原始的排序功能
	strconv	提供了将字符串转换成基本数据类型，或者从基本数据类型转换为字符串的功能
		strconv.Itoa(5555)
		strconv.Atoi('jjj')
	os	提供了与平台无关的操作系统功能接口 Unix形式
	sync	提供了基本的同步原语 例如互斥锁
	flag	flag包实现了命令行解析
	encoding/json	实现了编码与解码JSON对象
	html/template	
		数据驱动模版，用于生成文本输出，如HTML
		将模版关联到某个数据结构上进行解析。
		模板内容指向数据结构的元素(通常结 构的字段或者 map 的键)控制解析
		并且决定某个值会被显示。模板扫描结构以 便解析，
		而 “游标” @ 决定了当前位置在结构中的值。
	net/http
		实现了HTTP请求、响应和URL的解析
		提供了可扩展的HTTP服务和基本的HTTP客户端
	unsafe
		包含了Go程序中数据类型上所有不安全的操作，通常无须使用这个
	reflect
		实现了运行时反射，允许程序通过抽象类型操作对象
		通常用于处理静态类型 interface{}的值，并且通过Typeof解析出其动态类型信息
		通常会返回一个有接口类型Type的对象
	os/exec	执行外部命令

init() 函数
	每个包里包含












